pipeline {
    agent { label 'tenjin-pt-test' }

    parameters {
        string(name: 'TEST_ID', defaultValue: '6504', description: 'Test ID')
        string(name: 'PROJECT_ID', defaultValue: '224', description: 'Project ID')
        string(name: 'SERVER_HOST', defaultValue: '192.168.16.176', description: 'Server Host/IP')
        string(name: 'SERVER_PORT', defaultValue: '81', description: 'Server Port')
    }

    environment {
        CLUSTER_ID = "152"                // Fixed value
        CREATED_BY = "admin"              // Fixed value
        CREATED_BY_EMAIL = "admin@gmail.com" // Fixed value
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/basavarajbasu1998/test_jenkins.git'
            }
        }

        stage('Initializing Execution') {
            steps {
                script {
                    def baseUrl = "http://${params.SERVER_HOST}:${params.SERVER_PORT}"

                    def response = sh(
                        script: """curl -s -X POST "${baseUrl}/api/execution" \
                                   -H "accept: */*" \
                                   -H "Content-Type: application/json" \
                                   -d '{
                                         "testId": ${params.TEST_ID},
                                         "clusterId": "${env.CLUSTER_ID}",
                                         "projectId": "${params.PROJECT_ID}",
                                         "createdBy": "${env.CREATED_BY}",
                                         "createdByEmail": "${env.CREATED_BY_EMAIL}"
                                       }'""",
                        returnStdout: true
                    ).trim()

                    echo "API 1 Response: ${response}"
                    def json = readJSON text: response
                    env.EXECUTION_ID = json.executionId
                    echo "Execution ID: ${env.EXECUTION_ID}"
                }
            }
        }

        stage('Running Execution') {
            steps {
                script {
                    def baseUrl = "http://${params.SERVER_HOST}:${params.SERVER_PORT}"
                    def executionStatus = "Running"

                    timeout(time: 30, unit: 'MINUTES') {
                        while (executionStatus == "Running") {
                            sleep 10

                            def statusResponse = sh(
                                script: """curl -s -X GET "${baseUrl}/api/execution/summary?executionId=${env.EXECUTION_ID}" \
                                           -H "accept: */*" \
                                           -H "Content-Type: application/json" """,
                                returnStdout: true
                            ).trim()

                            echo "API 2 Response: ${statusResponse}"
                            def statusJson = readJSON text: statusResponse
                            executionStatus = statusJson?.execution?.executionStatus ?: statusJson?.executionStatus ?: "Running"
                            echo "Current Execution Status: ${executionStatus}"
                        }
                    }

                    echo "Execution Finished with Status: ${executionStatus}"
                }
            }
        }

        stage('Preparing Execution Results') {
            steps {
                script {
                    def baseUrl = "http://${params.SERVER_HOST}:${params.SERVER_PORT}"
                    // Include Jenkins BUILD_NUMBER in the ZIP file
                    def zipFile = "execution_${env.EXECUTION_ID}_build_${env.BUILD_NUMBER}.zip"

                    sh """curl -s -o ${zipFile} "${baseUrl}/api/zip/${env.EXECUTION_ID}" """
                    echo "ZIP file downloaded: ${zipFile} (workspace: ${pwd()})"

                    archiveArtifacts artifacts: zipFile, fingerprint: true
                }
            }
        }

    }

    post {
        success {
            echo "Pipeline completed successfully for Jenkins build ${env.BUILD_NUMBER}!"
        }
        failure {
            echo "Pipeline failed for Jenkins build ${env.BUILD_NUMBER}."
        }
    }
}
